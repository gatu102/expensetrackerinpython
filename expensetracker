        self.refresh_treeview()
        messagebox.showinfo("Success", f"Expense added: {category.title()} - {amount:.2f} on {date}")

    def edit_expense(self):
        selected = self.tree.selection()
        if not selected:
            messagebox.showwarning("Warning", "Select an expense to edit."); return
        idx = self.tree.index(selected[0])
        exp = self.expenses[idx]
        category = simpledialog.askstring("Edit Category", "Enter new category:", initialvalue=exp['category'], parent=self.root)
        if not category: return
        try:
            amount = float(simpledialog.askstring("Edit Amount", "Enter new amount:", initialvalue=str(exp['amount']), parent=self.root))
            if amount < 0: messagebox.showerror("Error", "Amount cannot be negative!"); return
        except (ValueError, TypeError):
            messagebox.showerror("Error", "Invalid amount entered!"); return
        self.expenses[idx] = {"category": category, "amount": amount, "date": exp['date']}
        self.save_expenses()
        self.refresh_treeview()
        messagebox.showinfo("Updated", f"Expense updated: {category.title()} - {amount:.2f}")

    def delete_expense(self):
        selected = self.tree.selection()
        if not selected:
            messagebox.showwarning("Warning", "Select an expense to delete."); return
        idx = self.tree.index(selected[0])
        removed = self.expenses.pop(idx)
        self.save_expenses()
        self.refresh_treeview()
        messagebox.showinfo("Deleted", f"Removed: {removed['category'].title()} - {removed['amount']:.2f}")

    # Export
    def export_expenses(self):
        if not self.expenses:
            messagebox.showinfo("Export", "No expenses to export."); return
        file = filedialog.asksaveasfilename(defaultextension=".csv",
                                            filetypes=[("CSV files","*.csv"), ("Text files","*.txt")])
        if file:
            if file.endswith(".csv"):
                with open(file, "w", newline="") as f:
                    writer = csv.DictWriter(f, fieldnames=["Category","Amount","Date"])
                    writer.writeheader()
                    for exp in self.expenses:
                        writer.writerow(exp)
            else:
                with open(file, "w") as f:
                    for exp in self.expenses:
                        f.write(f"{exp['category'].title()} - {exp['amount']:.2f} - {exp['date']}\n")
            messagebox.showinfo("Exported", f"Expenses exported to {file}")

    # Total
    def view_total(self):
        total = sum(exp['amount'] for exp in self.expenses)
        messagebox.showinfo("Total Expenses", f"Total Expenses: {total:.2f}")

    # Filtering
    def apply_filter(self):
        category = self.filter_var.get().strip().lower()
        if not category:
            messagebox.showwarning("Filter", "Enter a category to filter."); return
        filtered = [exp for exp in self.expenses if exp['category'].lower() == category]
        if not filtered: messagebox.showinfo("Filter", "No expenses found for this category.")
        self.refresh_treeview(filtered)

    def reset_filter(self):
        self.filter_var.set("")
        self.refresh_treeview()

    # Pie chart
    def show_pie_chart(self):
        if not self.expenses:
            messagebox.showinfo("Pie Chart", "No expenses to show.")
            return
        category_totals = {}
        for exp in self.expenses:
            cat = exp['category'].title()
            category_totals[cat] = category_totals.get(cat, 0) + exp['amount']
        labels = list(category_totals.keys())
        sizes = list(category_totals.values())
        plt.figure(figsize=(6,6))
        plt.pie(sizes, labels=labels, autopct="%1.1f%%", startangle=140)
        plt.title("Expenses by Category")
        plt.show()

    # Bar chart
    def show_bar_chart(self):
        if not self.expenses:
            messagebox.showinfo("Bar Chart", "No expenses to show.")
            return
        category_totals = {}
        for exp in self.expenses:
            cat = exp['category'].title()
            category_totals[cat] = category_totals.get(cat, 0) + exp['amount']
        labels = list(category_totals.keys())
        sizes = list(category_totals.values())
        plt.figure(figsize=(8,5))
        plt.bar(labels, sizes, color="#69b3a2")
        plt.xlabel("Category")
        plt.ylabel("Amount")
        plt.title("Expenses by Category")
        plt.show()

    # Sort Treeview
    def sort_tree(self, col):
        reverse = getattr(self, f"_reverse_{col}", False)
        if col == "Amount":
            self.expenses.sort(key=lambda x: x['amount'], reverse=reverse)
        elif col == "Date":
            self.expenses.sort(key=lambda x: datetime.strptime(x['date'], "%Y-%m-%d %H:%M"), reverse=reverse)
        else:
            self.expenses.sort(key=lambda x: x['category'].lower(), reverse=reverse)
        setattr(self, f"_reverse_{col}", not reverse)
        self.refresh_treeview()

    # Reset all expenses
    def reset_all(self):
        if messagebox.askyesno("Confirm Reset", "Are you sure you want to delete all expenses?"):
            self.expenses.clear()
            self.save_expenses()
            self.refresh_treeview()
            messagebox.showinfo("Reset", "All expenses have been deleted.")

if __name__ == "__main__":
    root = tk.Tk()
    app = ExpenseTracker(root)
    root.mainloop()
