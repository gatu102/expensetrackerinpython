import tkinter as tk
from tkinter import messagebox, simpledialog, filedialog, ttk
import json, os
import matplotlib.pyplot as plt
from datetime import datetime
import csv

EXPENSE_FILE = "expenses.json"

class ExpenseTracker:
    def __init__(self, root):
        self.root = root
        self.root.title("Expense Tracker with Charts")
        self.root.geometry("850x550")
        self.expenses = self.load_expenses()

        self.create_filter_frame()
        self.create_treeview()
        self.create_buttons()
        self.refresh_treeview()

    # UI Components
    def create_filter_frame(self):
        filter_frame = tk.Frame(self.root)
        filter_frame.pack(pady=5)
        tk.Label(filter_frame, text="Filter by Category:").pack(side=tk.LEFT, padx=5)
        self.filter_var = tk.StringVar()
        tk.Entry(filter_frame, textvariable=self.filter_var, width=20).pack(side=tk.LEFT)
        tk.Button(filter_frame, text="Apply", command=self.apply_filter).pack(side=tk.LEFT, padx=5)
        tk.Button(filter_frame, text="Reset", command=self.reset_filter).pack(side=tk.LEFT, padx=5)
        tk.Button(filter_frame, text="Pie Chart", command=lambda:self.show_chart('pie'), bg="#add8e6").pack(side=tk.LEFT, padx=5)
        tk.Button(filter_frame, text="Bar Chart", command=lambda:self.show_chart('bar'), bg="#dda0dd").pack(side=tk.LEFT, padx=5)

    def create_treeview(self):
        columns = ("Category", "Amount", "Date")
        self.tree = ttk.Treeview(self.root, columns=columns, show="headings", selectmode="browse")
        for col in columns:
            self.tree.heading(col, text=col, command=lambda c=col: self.sort_tree(c))
        self.tree.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)

    def create_buttons(self):
        btn_frame = tk.Frame(self.root)
        btn_frame.pack(pady=5)
        buttons = [
            ("Add Expense", self.add_expense, "#90ee90"),
            ("Edit Expense", self.edit_expense, "#ffd700"),
            ("Delete Expense", self.delete_expense, "#ff7f7f"),
            ("Export Expenses", self.export_expenses, "#add8e6"),
            ("View Total", self.view_total, "#ffb347"),
            ("Reset All", self.reset_all, "#ff4500")
        ]
        for i, (text, cmd, color) in enumerate(buttons):
            tk.Button(btn_frame, text=text, command=cmd, width=15, bg=color).grid(row=0, column=i, padx=5)

    # Load & Save
    def load_expenses(self):
        if os.path.exists(EXPENSE_FILE):
            with open(EXPENSE_FILE, "r") as f:
                try: return json.load(f)
                except json.JSONDecodeError:
                    messagebox.showwarning("Warning", "Corrupted file. Starting fresh.")
        return []

    def save_expenses(self):
        with open(EXPENSE_FILE, "w") as f:
            json.dump(self.expenses, f, indent=4)

    # Treeview
    def refresh_treeview(self, filtered=None):
        for row in self.tree.get_children(): self.tree.delete(row)
        data = filtered if filtered is not None else self.expenses
        for exp in data:
            self.tree.insert("", tk.END, values=(exp['category'].title(), f"{exp['amount']:.2f}", exp['date']))

    # Add/Edit/Delete
    def add_expense(self):
        category = simpledialog.askstring("Category", "Enter category:", parent=self.root)
        if not category: return
        try:
            amount = float(simpledialog.askstring("Amount", "Enter amount:", parent=self.root))
            if amount < 0: raise ValueError
        except (ValueError, TypeError):
            messagebox.showerror("Error", "Invalid amount entered!"); return
        date = datetime.now().strftime("%Y-%m-%d %H:%M")
        self.expenses.append({"category": category, "amount": amount, "date": date})
        self.save_expenses(); self.refresh_treeview()
        messagebox.showinfo("Success", f"Added: {category.title()} - {amount:.2f} on {date}")

    def edit_expense(self):
        selected = self.tree.selection()
        if not selected: messagebox.showwarning("Warning", "Select an expense to edit."); return
        idx = self.tree.index(selected[0])
        exp = self.expenses[idx]
        category = simpledialog.askstring("Edit Category", "Enter new category:", initialvalue=exp['category'], parent=self.root)
        if not category: return
        try:
            amount = float(simpledialog.askstring("Edit Amount", "Enter new amount:", initialvalue=str(exp['amount']), parent=self.root))
            if amount < 0: raise ValueError
        except (ValueError, TypeError):
            messagebox.showerror("Error", "Invalid amount entered!"); return
        self.expenses[idx] = {"category": category, "amount": amount, "date": exp['date']}
        self.save_expenses(); self.refresh_treeview()
        messagebox.showinfo("Updated", f"Updated: {category.title()} - {amount:.2f}")

    def delete_expense(self):
        selected = self.tree.selection()
        if not selected: messagebox.showwarning("Warning", "Select an expense to delete."); return
        idx = self.tree.index(selected[0])
        removed = self.expenses.pop(idx)
        self.save_expenses(); self.refresh_treeview()
        messagebox.showinfo("Deleted", f"Removed: {removed['category'].title()} - {removed['amount']:.2f}")

    # Export
    def export_expenses(self):
        if not self.expenses: messagebox.showinfo("Export", "No expenses to export."); return
        file = filedialog.asksaveasfilename(defaultextension=".csv", filetypes=[("CSV","*.csv"),("Text","*.txt")])
        if not file: return
        if file.endswith(".csv"):
            with open(file,"w",newline="") as f:
                writer = csv.DictWriter(f, fieldnames=["Category","Amount","Date"])
                writer.writeheader(); writer.writerows(self.expenses)
        else:
            with open(file,"w") as f:
                for exp in self.expenses: f.write(f"{exp['category'].title()} - {exp['amount']:.2f} - {exp['date']}\n")
        messagebox.showinfo("Exported", f"Expenses exported to {file}")

    # Total
    def view_total(self):
        total = sum(exp['amount'] for exp in self.expenses)
        messagebox.showinfo("Total Expenses", f"Total Expenses: {total:.2f}")

    # Filter
    def apply_filter(self):
        category = self.filter_var.get().strip().lower()
        if not category: messagebox.showwarning("Filter", "Enter a category to filter."); return
        filtered = [exp for exp in self.expenses if exp['category'].lower() == category]
        if not filtered: messagebox.showinfo("Filter", "No expenses found for this category.")
        self.refresh_treeview(filtered)

    def reset_filter(self):
        self.filter_var.set(""); self.refresh_treeview()

    # Charts
    def show_chart(self, chart_type):
        if not self.expenses: messagebox.showinfo("Chart", "No expenses to show."); return
        category_totals = {}
        for exp in self.expenses:
            cat = exp['category'].title()
            category_totals[cat] = category_totals.get(cat, 0) + exp['amount']
        labels, sizes = list(category_totals.keys()), list(category_totals.values())
        plt.figure(figsize=(6,6) if chart_type=='pie' else (8,5))
        if chart_type=='pie':
            plt.pie(sizes, labels=labels, autopct="%1.1f%%", startangle=140)
            plt.title("Expenses by Category")
        else:
            plt.bar(labels, sizes, color="#69b3a2")
            plt.xlabel("Category"); plt.ylabel("Amount"); plt.title("Expenses by Category")
        plt.show()

    # Sorting
    def sort_tree(self, col):
        reverse = getattr(self, f"_reverse_{col}", False)
        if col=="Amount":
            self.expenses.sort(key=lambda x:x['amount'], reverse=reverse)
        elif col=="Date":
            self.expenses.sort(key=lambda x:datetime.strptime(x['date'],"%Y-%m-%d %H:%M"), reverse=reverse)
        else:
            self.expenses.sort(key=lambda x:x['category'].lower(), reverse=reverse)
        setattr(self, f"_reverse_{col}", not reverse); self.refresh_treeview()

    # Reset All
    def reset_all(self):
        if messagebox.askyesno("Confirm Reset", "Delete all expenses?"):
            self.expenses.clear(); self.save_expenses(); self.refresh_treeview()
            messagebox.showinfo("Reset", "All expenses deleted.")

if __name__ == "__main__":
    root = tk.Tk()
    app = ExpenseTracker(root)
    root.mainloop()
