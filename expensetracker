import tkinter as tk
from tkinter import messagebox, simpledialog, filedialog, ttk
import json, os, csv
from datetime import datetime
import matplotlib.pyplot as plt

EXPENSE_FILE = "expenses.json"

class ExpenseTracker:
    def __init__(self, root):
        self.root = root
        self.root.title("Expense Tracker with Charts")
        self.root.geometry("850x550")
        self.expenses = self.load_expenses()

        self.create_filter_frame()
        self.create_treeview()
        self.create_button_frame()
        self.refresh_treeview()

    # ------------------ UI Components ------------------ #
    def create_filter_frame(self):
        frame = tk.Frame(self.root)
        frame.pack(pady=5)
        tk.Label(frame, text="Filter by Category:").pack(side=tk.LEFT, padx=5)
        self.filter_var = tk.StringVar()
        tk.Entry(frame, textvariable=self.filter_var).pack(side=tk.LEFT)
        tk.Button(frame, text="Apply", command=self.apply_filter).pack(side=tk.LEFT, padx=5)
        tk.Button(frame, text="Reset", command=self.reset_filter).pack(side=tk.LEFT, padx=5)
        tk.Button(frame, text="Show Pie Chart", command=self.show_pie_chart, bg="#add8e6").pack(side=tk.LEFT, padx=5)
        tk.Button(frame, text="Show Bar Chart", command=self.show_bar_chart, bg="#dda0dd").pack(side=tk.LEFT, padx=5)

    def create_treeview(self):
        columns = ("Category", "Amount", "Date")
        self.tree = ttk.Treeview(self.root, columns=columns, show="headings", selectmode="browse")
        for col in columns:
            self.tree.heading(col, text=col, command=lambda c=col: self.sort_tree(c))
        self.tree.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)

    def create_button_frame(self):
        frame = tk.Frame(self.root)
        frame.pack(pady=5)
        buttons = [
            ("Add Expense", self.add_expense, "#90ee90"),
            ("Edit Expense", self.edit_expense, "#ffd700"),
            ("Delete Expense", self.delete_expense, "#ff7f7f"),
            ("Export Expenses", self.export_expenses, "#add8e6"),
            ("View Total", self.view_total, "#ffb347"),
            ("Reset All Expenses", self.reset_all, "#ff4500")
        ]
        for i, (text, cmd, color) in enumerate(buttons):
            tk.Button(frame, text=text, command=cmd, width=15, bg=color).grid(row=0, column=i, padx=5)

    # ------------------ Data Handling ------------------ #
    def load_expenses(self):
        if os.path.exists(EXPENSE_FILE):
            try:
                with open(EXPENSE_FILE, "r") as f:
                    return json.load(f)
            except json.JSONDecodeError:
                messagebox.showwarning("Warning", "Corrupted expense file. Starting fresh.")
        return []

    def save_expenses(self):
        with open(EXPENSE_FILE, "w") as f:
            json.dump(self.expenses, f, indent=4)

    # ------------------ Treeview Management ------------------ #
    def refresh_treeview(self, filtered=None):
        self.tree.delete(*self.tree.get_children())
        data = filtered if filtered else self.expenses
        for exp in data:
            self.tree.insert("", tk.END, values=(exp['category'].title(), f"{exp['amount']:.2f}", exp['date']))

    # ------------------ CRUD Operations ------------------ #
    def add_expense(self):
        category = simpledialog.askstring("Category", "Enter category (e.g., Food, Transport):", parent=self.root)
        if not category: return
        amount = self.get_amount("Amount")
        if amount is None: return
        date = datetime.now().strftime("%Y-%m-%d %H:%M")
        self.expenses.append({"category": category, "amount": amount, "date": date})
        self.save_expenses()
        self.refresh_treeview()
        messagebox.showinfo("Success", f"Expense added: {category.title()} - {amount:.2f} on {date}")

    def edit_expense(self):
        selected = self.tree.selection()
        if not selected: 
            messagebox.showwarning("Warning", "Select an expense to edit."); return
        idx = self.tree.index(selected[0])
        exp = self.expenses[idx]

        category = simpledialog.askstring("Edit Category", "Enter new category:", initialvalue=exp['category'], parent=self.root)
        if not category: return
        amount = self.get_amount("Edit Amount", initial=str(exp['amount']))
        if amount is None: return

        self.expenses[idx] = {"category": category, "amount": amount, "date": exp['date']}
        self.save_expenses()
        self.refresh_treeview()
        messagebox.showinfo("Updated", f"Expense updated: {category.title()} - {amount:.2f}")

    def delete_expense(self):
        selected = self.tree.selection()
        if not selected:
            messagebox.showwarning("Warning", "Select an expense to delete."); return
        idx = self.tree.index(selected[0])
        removed = self.expenses.pop(idx)
        self.save_expenses()
        self.refresh_treeview()
        messagebox.showinfo("Deleted", f"Removed: {removed['category'].title()} - {removed['amount']:.2f}")

    def get_amount(self, prompt, initial=""):
        try:
            value = simpledialog.askstring(prompt, f"Enter {prompt.lower()}:", initialvalue=initial, parent=self.root)
            if value is None: return None
            amount = float(value)
            if amount < 0:
                messagebox.showerror("Error", "Amount cannot be negative!"); return None
            return amount
        except ValueError:
            messagebox.showerror("Error", "Invalid amount entered!"); return None

    # ------------------ Export ------------------ #
    def export_expenses(self):
        if not self.expenses:
            messagebox.showinfo("Export", "No expenses to export."); return
        file = filedialog.asksaveasfilename(defaultextension=".csv",
                                            filetypes=[("CSV files","*.csv"), ("Text files","*.txt")])
        if file:
            try:
                if file.endswith(".csv"):
                    with open(file, "w", newline="") as f:
                        writer = csv.DictWriter(f, fieldnames=["category","amount","date"])
                        writer.writeheader()
                        for exp in self.expenses:
                            writer.writerow(exp)
                else:
                    with open(file, "w") as f:
                        for exp in self.expenses:
                            f.write(f"{exp['category'].title()} - {exp['amount']:.2f} - {exp['date']}\n")
                messagebox.showinfo("Exported", f"Expenses exported to {file}")
            except Exception as e:
                messagebox.showerror("Error", f"Failed to export: {e}")

    # ------------------ Statistics ------------------ #
    def view_total(self):
        total = sum(exp['amount'] for exp in self.expenses)
        messagebox.showinfo("Total Expenses", f"Total Expenses: {total:.2f}")

    def apply_filter(self):
        category = self.filter_var.get().strip().lower()
        if not category:
            messagebox.showwarning("Filter", "Enter a category to filter."); return
        filtered = [exp for exp in self.expenses if exp['category'].lower() == category]
        if not filtered: messagebox.showinfo("Filter", "No expenses found for this category.")
        self.refresh_treeview(filtered)

    def reset_filter(self):
        self.filter_var.set("")
        self.refresh_treeview()

    # ------------------ Charts ------------------ #
    def show_pie_chart(self):
        self.show_chart(chart_type="pie")

    def show_bar_chart(self):
        self.show_chart(chart_type="bar")

    def show_chart(self, chart_type="pie"):
        if not self.expenses:
            messagebox.showinfo("Chart", "No expenses to show."); return
        totals = {}
        for exp in self.expenses:
            cat = exp['category'].title()
            totals[cat] = totals.get(cat, 0) + exp['amount']
        labels, sizes = list(totals.keys()), list(totals.values())
        plt.figure(figsize=(6,6) if chart_type=="pie" else (8,5))
        if chart_type == "pie":
            plt.pie(sizes, labels=labels, autopct="%1.1f%%", startangle=140)
        else:
            plt.bar(labels, sizes, color="#69b3a2")
            plt.xlabel("Category")
            plt.ylabel("Amount")
        plt.title(f"Expenses by Category ({chart_type.title()})")
        plt.show()

    # ------------------ Sorting ------------------ #
    def sort_tree(self, col):
        reverse = getattr(self, f"_reverse_{col}", False)
        if col == "Amount":
            self.expenses.sort(key=lambda x: x['amount'], reverse=reverse)
        elif col == "Date":
            self.expenses.sort(key=lambda x: datetime.strptime(x['date'], "%Y-%m-%d %H:%M"), reverse=reverse)
        else:
            self.expenses.sort(key=lambda x: x['category'].lower(), reverse=reverse)
        setattr(self, f"_reverse_{col}", not reverse)
        self.refresh_treeview()

    # ------------------ Reset ------------------ #
    def reset_all(self):
        if messagebox.askyesno("Confirm Reset", "Are you sure you want to delete all expenses?"):
            self.expenses.clear()
            self.save_expenses()
            self.refresh_treeview()
            messagebox.showinfo("Reset", "All expenses have been deleted.")

# ------------------ Main ------------------ #
if __name__ == "__main__":
    root = tk.Tk()
    app = ExpenseTracker(root)
    root.mainloop()
