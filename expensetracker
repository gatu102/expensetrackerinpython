import tkinter as tk
from tkinter import messagebox, simpledialog, filedialog, ttk
import json, os, csv
import matplotlib.pyplot as plt

EXPENSE_FILE = "expenses.json"


class ExpenseTracker:
    def __init__(self, root):
        self.root = root
        self.root.title("üí∞ Expense Tracker with Charts")
        self.root.geometry("800x550")
        self.root.resizable(False, False)
        self.expenses = self.load_expenses()

        self.create_menu()
        self.create_filter_frame()
        self.create_treeview()
        self.create_buttons()
        self.create_status_bar()

        self.refresh_treeview()

    # ---------------------- UI CREATION ---------------------- #
    def create_menu(self):
        menubar = tk.Menu(self.root)
        filemenu = tk.Menu(menubar, tearoff=0)
        filemenu.add_command(label="Export Expenses", command=self.export_expenses)
        filemenu.add_separator()
        filemenu.add_command(label="Exit", command=self.root.quit)
        menubar.add_cascade(label="File", menu=filemenu)

        helpmenu = tk.Menu(menubar, tearoff=0)
        helpmenu.add_command(label="About", command=lambda: messagebox.showinfo(
            "About", "Expense Tracker v2.0\nDeveloped in Python using Tkinter."
        ))
        menubar.add_cascade(label="Help", menu=helpmenu)

        self.root.config(menu=menubar)

    def create_filter_frame(self):
        filter_frame = tk.Frame(self.root)
        filter_frame.pack(pady=8)
        tk.Label(filter_frame, text="üîç Filter by Category:").pack(side=tk.LEFT, padx=5)
        self.filter_var = tk.StringVar()
        self.filter_entry = tk.Entry(filter_frame, textvariable=self.filter_var, width=20)
        self.filter_entry.pack(side=tk.LEFT)
        tk.Button(filter_frame, text="Apply", command=self.apply_filter).pack(side=tk.LEFT, padx=5)
        tk.Button(filter_frame, text="Reset", command=self.reset_filter).pack(side=tk.LEFT, padx=5)
        tk.Button(filter_frame, text="üìä Show Pie Chart", command=self.show_pie_chart, bg="#add8e6").pack(side=tk.LEFT, padx=5)

    def create_treeview(self):
        columns = ("Category", "Amount")
        style = ttk.Style()
        style.configure("Treeview.Heading", font=("Segoe UI", 10, "bold"))
        style.configure("Treeview", font=("Segoe UI", 10), rowheight=25)

        self.tree = ttk.Treeview(self.root, columns=columns, show="headings", selectmode="browse")
        self.tree.heading("Category", text="Category")
        self.tree.heading("Amount", text="Amount")
        self.tree.column("Category", width=300)
        self.tree.column("Amount", width=120, anchor=tk.E)
        self.tree.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)

    def create_buttons(self):
        btn_frame = tk.Frame(self.root)
        btn_frame.pack(pady=5)
        buttons = [
            ("Add Expense", self.add_expense, "#90ee90"),
            ("Edit Expense", self.edit_expense, "#ffd700"),
            ("Delete Expense", self.delete_expense, "#ff7f7f"),
            ("Export Expenses", self.export_expenses, "#add8e6"),
            ("View Total", self.view_total, "#ffb347")
        ]
        for i, (text, cmd, color) in enumerate(buttons):
            tk.Button(btn_frame, text=text, command=cmd, width=16, bg=color).grid(row=0, column=i, padx=5)

    def create_status_bar(self):
        self.status_var = tk.StringVar(value="Total: ‚Çπ0.00")
        status_bar = tk.Label(self.root, textvariable=self.status_var, bd=1, relief=tk.SUNKEN, anchor=tk.E)
        status_bar.pack(fill=tk.X, side=tk.BOTTOM)

    # ---------------------- DATA HANDLING ---------------------- #
    def load_expenses(self):
        if os.path.exists(EXPENSE_FILE):
            with open(EXPENSE_FILE, "r") as f:
                try:
                    return json.load(f)
                except json.JSONDecodeError:
                    messagebox.showwarning("Warning", "Corrupted expense file. Starting fresh.")
                    return []
        return []

    def save_expenses(self):
        with open(EXPENSE_FILE, "w") as f:
            json.dump(self.expenses, f, indent=4)
        self.update_status()

    # ---------------------- TREEVIEW HANDLING ---------------------- #
    def refresh_treeview(self, data=None):
        for row in self.tree.get_children():
            self.tree.delete(row)
        data = data if data is not None else self.expenses
        data = sorted(data, key=lambda x: x["amount"], reverse=True)
        for exp in data:
            self.tree.insert("", tk.END, values=(exp["category"].title(), f"{exp['amount']:.2f}"))
        self.update_status()

    def update_status(self):
        total = sum(exp['amount'] for exp in self.expenses)
        self.status_var.set(f"Total: ‚Çπ{total:.2f}")

    # ---------------------- CRUD OPERATIONS ---------------------- #
    def add_expense(self):
        category = simpledialog.askstring("Category", "Enter category (e.g., Food, Travel):")
        if not category: return
        try:
            amount = float(simpledialog.askstring("Amount", "Enter amount:"))
            if amount < 0: raise ValueError
        except (ValueError, TypeError):
            messagebox.showerror("Error", "Invalid amount entered!")
            return

        self.expenses.append({"category": category.strip(), "amount": amount})
        self.save_expenses()
        self.refresh_treeview()
        messagebox.showinfo("Added", f"Added: {category.title()} - ‚Çπ{amount:.2f}")

    def edit_expense(self):
        selected = self.tree.selection()
        if not selected:
            messagebox.showwarning("Warning", "Select an expense to edit.")
            return
        idx = self.tree.index(selected[0])
        exp = self.expenses[idx]

        category = simpledialog.askstring("Edit Category", "Enter new category:", initialvalue=exp["category"])
        if not category: return
        try:
            amount = float(simpledialog.askstring("Edit Amount", "Enter new amount:", initialvalue=str(exp["amount"])))
            if amount < 0: raise ValueError
        except (ValueError, TypeError):
            messagebox.showerror("Error", "Invalid amount entered!")
            return

        self.expenses[idx] = {"category": category, "amount": amount}
        self.save_expenses()
        self.refresh_treeview()
        messagebox.showinfo("Updated", f"Expense updated: {category.title()} - ‚Çπ{amount:.2f}")

    def delete_expense(self):
        selected = self.tree.selection()
        if not selected:
            messagebox.showwarning("Warning", "Select an expense to delete.")
            return
        idx = self.tree.index(selected[0])
        exp = self.expenses[idx]

        if not messagebox.askyesno("Confirm Delete", f"Delete {exp['category'].title()} - ‚Çπ{exp['amount']:.2f}?"):
            return
        self.expenses.pop(idx)
        self.save_expenses()
        self.refresh_treeview()
        messagebox.showinfo("Deleted", "Expense removed successfully.")

    # ---------------------- EXPORTING ---------------------- #
    def export_expenses(self):
        if not self.expenses:
            messagebox.showinfo("Export", "No expenses to export.")
            return
        file = filedialog.asksaveasfilename(defaultextension=".csv",
                                            filetypes=[("CSV files", "*.csv"), ("Text files", "*.txt")])
        if not file: return

        with open(file, "w", newline="") as f:
            writer = csv.writer(f)
            writer.writerow(["Category", "Amount"])
            for exp in self.expenses:
                writer.writerow([exp["category"].title(), f"{exp['amount']:.2f}"])
        messagebox.showinfo("Exported", f"Expenses exported to {file}")

    # ---------------------- FILTERING ---------------------- #
    def apply_filter(self):
        category = self.filter_var.get().strip().lower()
        if not category:
            messagebox.showwarning("Filter", "Enter a category to filter.")
            return
        filtered = [exp for exp in self.expenses if category in exp['category'].lower()]
        if not filtered:
            messagebox.showinfo("Filter", "No matching expenses found.")
        self.refresh_treeview(filtered)

    def reset_filter(self):
        self.filter_var.set("")
        self.refresh_treeview()

    # ---------------------- CHARTS ---------------------- #
    def show_pie_chart(self):
        if not self.expenses:
            messagebox.showinfo("Pie Chart", "No expenses to show.")
            return

        category_totals = {}
        for exp in self.expenses:
            cat = exp["category"].title()
            category_totals[cat] = category_totals.get(cat, 0) + exp["amount"]

        labels, sizes = category_totals.keys(), category_totals.values()
        plt.figure(figsize=(6, 6))
        plt.pie(sizes, labels=labels, autopct="%1.1f%%", startangle=140)
        plt.title("Expense Distribution by Category")
        plt.tight_layout()
        plt.show(block=False)

    # ---------------------- TOTAL ---------------------- #
    def view_total(self):
        total = sum(exp['amount'] for exp in self.expenses)
        messagebox.showinfo("Total Expenses", f"Total Expenses: ‚Çπ{total:.2f}")


if __name__ == "__main__":
    root = tk.Tk()
    ExpenseTracker(root)
    root.mainloop()
