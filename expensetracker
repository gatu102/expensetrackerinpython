import json
import os

EXPENSE_FILE = "expenses.json"

def load_expenses():
    """Load expenses from JSON file."""
    if os.path.exists(EXPENSE_FILE):
        with open(EXPENSE_FILE, "r") as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                print("Error: Corrupted expenses file. Starting fresh.")
                return []
    return []

def save_expenses(expenses):
    """Save expenses to JSON file."""
    with open(EXPENSE_FILE, "w") as f:
        json.dump(expenses, f, indent=4)

def show_expenses(expenses):
    """Display all recorded expenses."""
    if not expenses:
        print("\nNo expenses recorded.\n")
        return

    print("\n=== Your Expenses ===")
    total = 0
    for idx, exp in enumerate(expenses, 1):
        print(f"{idx}. {exp['category'].title()}: {exp['amount']:.2f}")
        total += exp['amount']
    print(f"Total Expenses: {total:.2f}\n")

def show_expenses_by_category(expenses):
    """Display total expenses grouped by category."""
    if not expenses:
        print("\nNo expenses recorded.\n")
        return
    category_totals = {}
    for exp in expenses:
        category = exp['category'].title()
        category_totals[category] = category_totals.get(category, 0) + exp['amount']

    print("\n=== Expenses by Category ===")
    for category, amount in category_totals.items():
        print(f"{category}: {amount:.2f}")
    print(f"Overall Total: {sum(category_totals.values()):.2f}\n")

def add_expense(expenses):
    """Add a new expense."""
    category = input("Enter category (e.g., Food, Transport): ").strip()
    if not category:
        print("Category cannot be empty.\n")
        return
    try:
        amount = float(input("Enter amount: ").strip())
        if amount < 0:
            print("Amount cannot be negative.\n")
            return
    except ValueError:
        print("Invalid amount. Enter a number.\n")
        return
    expenses.append({"category": category, "amount": amount})
    print(f"Expense added: {category.title()} - {amount:.2f}\n")

def delete_expense(expenses):
    """Delete an expense by its index."""
    if not expenses:
        print("\nNo expenses to delete.\n")
        return
    show_expenses(expenses)
    try:
        idx = int(input("Enter the expense number to delete: ").strip())
        if 1 <= idx <= len(expenses):
            removed = expenses.pop(idx-1)
            print(f"Removed: {removed['category'].title()} - {removed['amount']:.2f}\n")
        else:
            print("Invalid number.\n")
    except ValueError:
        print("Enter a valid number.\n")

def main():
    """Main program loop."""
    expenses = load_expenses()
    while True:
        print("==== Expense Tracker ====")
        print("1. View Expenses")
        print("2. View Expenses by Category")
        print("3. Add Expense")
        print("4. Delete Expense")
        print("5. Exit")
        choice = input("Enter choice (1-5): ").strip()

        if choice == "1":
            show_expenses(expenses)
        elif choice == "2":
            show_expenses_by_category(expenses)
        elif choice == "3":
            add_expense(expenses)
        elif choice == "4":
            delete_expense(expenses)
        elif choice == "5":
            save_expenses(expenses)
            print("Expenses saved. Goodbye!")
            break
        else:
            print("Invalid choice. Please select 1-5.\n")

if __name__ == "__main__":
    main()
