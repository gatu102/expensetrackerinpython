import tkinter as tk
from tkinter import messagebox, simpledialog, filedialog, ttk
import json
import os

EXPENSE_FILE = "expenses.json"

class ExpenseTracker:
    def __init__(self, root):
        self.root = root
        self.root.title("Expense Tracker")
        self.root.geometry("600x400")
        self.expenses = self.load_expenses()

        # Treeview to display expenses
        columns = ("Category", "Amount")
        self.tree = ttk.Treeview(root, columns=columns, show="headings")
        self.tree.heading("Category", text="Category")
        self.tree.heading("Amount", text="Amount")
        self.tree.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # Buttons frame
        btn_frame = tk.Frame(root)
        btn_frame.pack(pady=5)

        tk.Button(btn_frame, text="Add Expense", command=self.add_expense, width=15, bg="#90ee90").grid(row=0, column=0, padx=5)
        tk.Button(btn_frame, text="Delete Expense", command=self.delete_expense, width=15, bg="#ff7f7f").grid(row=0, column=1, padx=5)
        tk.Button(btn_frame, text="Export Expenses", command=self.export_expenses, width=15, bg="#add8e6").grid(row=0, column=2, padx=5)
        tk.Button(btn_frame, text="View Total", command=self.view_total, width=15, bg="#ffb347").grid(row=0, column=3, padx=5)

        self.refresh_treeview()

    def load_expenses(self):
        if os.path.exists(EXPENSE_FILE):
            with open(EXPENSE_FILE, "r") as f:
                try:
                    return json.load(f)
                except json.JSONDecodeError:
                    messagebox.showwarning("Warning", "Corrupted expense file. Starting fresh.")
                    return []
        return []

    def save_expenses(self):
        with open(EXPENSE_FILE, "w") as f:
            json.dump(self.expenses, f, indent=4)

    def refresh_treeview(self):
        # Clear existing
        for row in self.tree.get_children():
            self.tree.delete(row)
        # Insert expenses
        for exp in self.expenses:
            self.tree.insert("", tk.END, values=(exp['category'].title(), f"{exp['amount']:.2f}"))

    def add_expense(self):
        category = simpledialog.askstring("Category", "Enter category (e.g., Food, Transport):", parent=self.root)
        if not category:
            return
        try:
            amount = float(simpledialog.askstring("Amount", "Enter amount:", parent=self.root))
            if amount < 0:
                messagebox.showerror("Error", "Amount cannot be negative!")
                return
        except (ValueError, TypeError):
            messagebox.showerror("Error", "Invalid amount entered!")
            return
        self.expenses.append({"category": category, "amount": amount})
        self.save_expenses()
        self.refresh_treeview()
        messagebox.showinfo("Success", f"Expense added: {category.title()} - {amount:.2f}")

    def delete_expense(self):
        selected = self.tree.selection()
        if not selected:
            messagebox.showwarning("Warning", "Select an expense to delete.")
            return
        idx = self.tree.index(selected[0])
        removed = self.expenses.pop(idx)
        self.save_expenses()
        self.refresh_treeview()
        messagebox.showinfo("Deleted", f"Removed: {removed['category'].title()} - {removed['amount']:.2f}")

    def export_expenses(self):
        if not self.expenses:
            messagebox.showinfo("Export", "No expenses to export.")
            return
        file = filedialog.asksaveasfilename(defaultextension=".txt",
                                            filetypes=[("Text files","*.txt"), ("CSV files","*.csv")])
        if file:
            with open(file, "w") as f:
                for exp in self.expenses:
                    f.write(f"{exp['category'].title()} - {exp['amount']:.2f}\n")
            messagebox.showinfo("Exported", f"Expenses exported to {file}")

    def view_total(self):
        total = sum(exp['amount'] for exp in self.expenses)
        messagebox.showinfo("Total Expenses", f"Total Expenses: {total:.2f}")

if __name__ == "__main__":
    root = tk.Tk()
    app = ExpenseTracker(root)
    root.mainloop()
